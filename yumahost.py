# –§–µ–π–∫ –º–æ–¥—É–ª—å –Ω–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞



import logging
import random
import time
from asyncio import sleep
from random import choice, randint

from telethon.tl.functions.channels import JoinChannelRequest

from .. import loader, utils

logger = logging.getLogger(__name__)


def register(cb):
    cb(Yumahost())


class Yumahost(loader.Module):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å @yumahost"""

    strings = {"name": "Yumahost"}

    async def yumahostcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π .yumahost <–¥–Ω–∏>."""
        text = utils.get_args_raw(message)
        if not text:
            for pinj in ["üôÉ <code>–í—ã–¥–∞—é –ø–æ–¥–ø–∏—Å–∫—É...</code>"]:
                await message.edit(pinj)
                await sleep(0.3)

            named_tuple = time.localtime()
            time_string = time.strftime("%H:%M:%S", named_tuple)

            await message.edit(
                "<emoji document_id=5431449001532594346>‚ö°Ô∏è</emoji> <b>–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞"
                " Telegram:</b>"
                f" <code>{random.randint(10, 1999)}.{random.randint(10, 99)}</code>"
                " <b>ms</b>\n<emoji document_id=5445284980978621387>üöÄ</emoji>"
                f" <b>–ü—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {time_string}</b>"
            )
            return
        else:
            for pinj in ["üôÇ <code>–í—ã–¥–∞—é –ø–æ–¥–ø–∏—Å–∫—É...</code>"]:
                await message.edit(pinj)
                await sleep(0.3)

            named_tuple = time.localtime()
            time_string = time.strftime("%H:%M:%S", named_tuple)

            pinj = (
                f"ü•∞ <b>–£—á–∞—Å—Ç–Ω–∏–∫—É —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–Ω–æ <code>YumaHost</code>, –ù–∞ <code>{text}</code>–¥–Ω–µ–π.</b>"
            )

            await message.edit(pinj)
